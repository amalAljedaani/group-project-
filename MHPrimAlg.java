
package GraphFramework;

import java.util.*;

public class MHPrimAlg extends MSTAlgorithm {

    public MHPrimAlg(Graph graph) {
        super(graph); // Call the constructor of the superclass
        primeMH_FindMST(); // cal primeMH_FindMST() to find MST  
    }

    @Override
    public void primeMH_FindMST() {
         // Initialize variables 
        Edge currentEdge;
        Vertex currentVertex;
        MinHeap PminHeap = new MinHeap();
        
        // Get the first vertex in the graph and mark it as visited
        Vertex startV = graph.verticess.get(0);
        startV.isVisited = true;

        // Add all the edges adjacent to the starting vertex to the min heap
        for (Edge e : startV.adjLists) {
            PminHeap.insert(e);

        }
        
         //The loop continues until all vertices in the graph have been visited.
        // Loop until the min heap is empty
        while (!PminHeap.isEmpty()) {
            
             // Extract the minimum edge from the min heap
            currentEdge = PminHeap.extractMin();
            
            // Determine which vertex in the currentEdge is unvisited source or destination?
            currentVertex = (currentEdge.source.isVisited == true ? currentEdge.destination : currentEdge.source);

            // If the vertex is unvisited, mark it as visited and add the edge to the MST result list
            if (!currentVertex.isVisited) {
                currentVertex.isVisited = true;
                MSTResultList.add(currentEdge);

                // Add all the edges adjacent to the current vertex to the min heap
                for (Edge adjEdges : currentVertex.adjLists) {
                    if (!adjEdges.destination.isVisited || !adjEdges.source.isVisited) {
                        PminHeap.insert(adjEdges);
                    }
                }
            }

        }

    }

    // Override the method in the superclass to implement Prim's algorithm
    @Override
    public void displayResultingMST() {
        System.out.println("The phone network (minimum spanning tree) generated by min-heap based Prim algorithm\n"
                + "is as follows:\n");
        int cost = 0; // Initialize a variable to track the total cost of the MST
        // Loop through each edge in the MST result list
        for (Edge e : MSTResultList) {
            e.display_info(); // Display information about the edge
            cost += e.getWeight();  // Add the weight of the edge to the total cost
        }
        // Print the total cost of the MST
        System.out.println("\nThe cost of designed phone network: " + cost + "\n");
    }
    
    @Override
    public void displayCost() {
        int cost = 0; // Initialize a variable to track the total cost of the MST
        // Loop through each edge in the MST result list
        for (Edge e : MSTResultList) {
            cost += e.getWeight();  // Add the weight of the edge to the total cost
        }
        // Print the total cost of the MST
        System.out.println("\nThe cost of designed phone network of Prim's Algorithm: " + cost + "\n");
}
}

